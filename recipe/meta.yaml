

{% set version = "5.10.1" %}
{% set buildnum = "0" %}
{% set install_base = "opt/omnisci" %}

package:
  name: intel_repack
  version: {{ version }}

source:
  - url: https://anaconda.org/conda-forge/omniscidb-common/{{ version }}/download/{{ target_platform }}/omniscidb-common-{{ version }}-h1234567_{{ buildnum }}.tar.bz2
    folder: omniscidb-common
  - url: https://anaconda.org/conda-forge/omniscidbe/{{ version }}/download/{{ target_platform }}/omniscidbe-{{ version }}-h1234567_{{ buildnum }}_cpu.tar.bz2
    folder: omniscidbe
  - url: https://anaconda.org/conda-forge/pyomniscidbe/{{ version }}/download/{{ target_platform }}/pyomniscidbe-{{ version }}-{{ 'py' ~ python | replace('.', '') }}h1234567_{{ buildnum }}_cpu.tar.bz2
    folder: pyomniscidbe

build:
  number: {{ buildnum|int }}
  binary_relocation: false
  detect_binary_files_with_prefix: false
  skip: True  # [not (x86 and linux)]
  runpath_whitelist:
    - $ORIGIN

outputs:
  - name: omniscidb-common
    version: {{ version }}
    script: repack.sh   # [unix]
    build:
      #string: h{{PKG_HASH}}_{{number}}_{{build_ext}}
      skip: True  # [not (x86 and linux)]
      run_exports:
        - {{ pin_subpackage('omniscidb-common',  max_pin='x.x.x') }}
    requirements:
      build:
        # c compiler is specified here to get run constraint pins correct, presumably...
        - {{ compiler('c') }}
    test:
      commands:
        # Test installation
        # doc
        - test -f ${PREFIX}/share/doc/omnisci/LICENSE.md
        # data
        - test -d ${PREFIX}/{{ install_base }}/ThirdParty/gdal-data
        # thrift
        - test -f ${PREFIX}/{{ install_base }}/completion_hints.thrift
        - test -f ${PREFIX}/{{ install_base }}/omnisci.thrift
        - test -f ${PREFIX}/{{ install_base }}/common.thrift
        - test -f ${PREFIX}/{{ install_base }}/QueryEngine/serialized_result_set.thrift
        - test -f ${PREFIX}/{{ install_base }}/QueryEngine/extension_functions.thrift
        # includes
        - test -f ${PREFIX}/include/omnisci/Shared/funcannotations.h
        - test -f ${PREFIX}/include/omnisci/Shared/InlineNullValues.h
        - test -f ${PREFIX}/include/omnisci/Logger/Logger.h
        # QE
        - test -f ${PREFIX}/include/omnisci/QueryEngine/OmniSciTypes.h
        - test -f ${PREFIX}/{{ install_base }}/QueryEngine/RuntimeFunctions.bc
        - test -f ${PREFIX}/{{ install_base }}/QueryEngine/RuntimeFunctions.bc
        - test -f ${PREFIX}/{{ install_base }}/QueryEngine/ExtensionFunctions.ast
        # jar
        - test -f ${PREFIX}/{{ install_base }}/bin/omnisci-utility-{{ version }}.jar
        - test -f ${PREFIX}/{{ install_base }}/bin/omnisci-jdbc-{{ version }}.jar
        - test -f ${PREFIX}/{{ install_base }}/bin/calcite-1.0-SNAPSHOT-jar-with-dependencies.jar
        # Unspecified
        - test -f ${PREFIX}/{{ install_base }}/bin/startomnisci
        - test -f ${PREFIX}/{{ install_base }}/bin/omnisci_insert_sample_data
        #
        - test -f ${PREFIX}/{{ install_base }}/bin/generate_cert
    about:
      home: https://www.omnisci.com/
      license: Apache-2.0
      license_family: APACHE
      license_file: omniscidb-common/share/doc/omnisci/LICENSE.md
      summary: The OmniSci database common files.
      description: |
        OmniSciDB is an in-memory, column store, SQL relational database
        that was designed from the ground up to run on GPUs.
        This package is a repackaged set of binaries obtained directly from Intel\'s anaconda.org conda-forge channel.
      doc_url: https://www.omnisci.com/docs/latest/
      dev_url: https://github.com/omnisci/omniscidb

  - name: omniscidbe
    version: {{ version }}
    script: repack.sh   # [unix]
    build:
      #string: h{{PKG_HASH}}_{{number}}_{{build_ext}}
      skip: True  # [not (x86 and linux)]
      # rpaths:
      #   - lib/
      #   # fixes "not found" in `ldd $PREFIX/lib/libDBEngine.so` output
      #   - {{ install_base }}/lib
      run_exports:
        - {{ pin_subpackage('omniscidbe',  max_pin='x.x.x') }}
    requirements:
      build:
        # c compiler is specified here to get run constraint pins correct, presumably..
        - {{ compiler('c') }}
      host:
      #   - arrow-cpp >=6.0.1,<6.0.2.0a0
      #   - arrow-cpp-proc 3.* cpu
         - blosc >=1.21.0,<2.0a0
      #   - boost-cpp >=1.74.0,<1.74.1.0a0
         - bzip2
         #- double-conversion >=3.2.0,<3.3.0a0
         - gxx_linux-64
         - libarchive >=3.5.2,<3.6.0a0
         #- libclang-cpp >=11.1.0,<11.2.0a0
         - libgcc-ng >=9.4.0
         - libgdal >=3.4.1,<3.5.0a0
         - libllvm11 >=11.1.0,<11.2.0a0
         - libpng >=1.6.37,<1.7.0a0
         - libstdcxx-ng >=9.4.0
         - libthrift >=0.15.0,<0.15.1.0a0
         - ncurses
         - omniscidb-common >=5.10.1,<5.10.2.0a0
         - openjdk 8.*
         - tbb >=2021.5.0
         - xz
         - zlib
      run:
      #   - arrow-cpp >=6.0.1,<6.0.2.0a0
      #   - arrow-cpp-proc 3.* cpu
         - blosc >=1.21.0,<2.0a0
      #   - boost-cpp >=1.74.0,<1.74.1.0a0
         - bzip2
         - double-conversion >=3.2.0,<3.3.0a0
         - gxx_linux-64
         - libarchive >=3.5.2,<3.6.0a0
         - libclang-cpp >=11.1.0,<11.2.0a0
         - libgcc-ng >=9.4.0
         - libgdal >=3.4.1,<3.5.0a0
         - libllvm11 >=11.1.0,<11.2.0a0
         - libpng >=1.6.37,<1.7.0a0
         - libstdcxx-ng >=9.4.0
         - libthrift >=0.15.0,<0.15.1.0a0
         - ncurses
         - omniscidb-common >=5.10.1,<5.10.2.0a0
         - openjdk 8.*
         - tbb >=2021.5.0
         - xz
         - zlib
      # run_constrained:
      #   - arrow-cpp-proc 3.* cpu

    test:
      commands:
        # Test installation
        - test -f ${PREFIX}/lib/libDBEngine.so
        # # Verify the activation scripts are in-place.
        # {% for state in ["activate", "deactivate"] %}
        # - test -f "${PREFIX}/etc/conda/{{ state }}.d/{{ PKG_NAME }}_{{ state }}.sh"
        # {% endfor %}
        # - |
        #   source ${PREFIX}/etc/conda/activate.d/{{ PKG_NAME }}_activate.sh
        #   test -n "${OMNISCI_ROOT_PATH+x}"
        #   ldd ${PREFIX}/lib/libDBEngine.so

  - name: pyomniscidbe
    script: repack.sh   # [unix]
    build:
      run_exports:
        - {{ pin_subpackage('pyomniscidbe',  max_pin='x.x.x') }}
    requirements:
      build:
        # c compiler is specified here to get run constraint pins correct, presumably..
        - {{ compiler('c') }}
      host:
        - {{ pin_subpackage('omniscidbe', exact=True) }}
      run:
        - python
        - {{ pin_subpackage('omniscidbe', exact=True) }}

    test:
      requires:
        - pytest
        - numpy
        - pandas
      imports:
        - omniscidbe
      source_files:
        - Embedded/test/
        - Tests/
      commands:
        - python Embedded/test/test_fsi.py
        - python Embedded/test/test_readcsv.py
        - pytest -sv Embedded/test/test_exceptions.py
    about:
      home: https://www.omnisci.com/
      license: Apache-2.0
      license_family: APACHE
      license_file: LICENSE.md
      summary: The OmniSci database

      description: |
        OmniSciDB is an in-memory, column store, SQL relational database
        that was designed from the ground up to run on GPUs.
      doc_url: https://www.omnisci.com/docs/latest/
      dev_url: https://github.com/omnisci/omniscidb