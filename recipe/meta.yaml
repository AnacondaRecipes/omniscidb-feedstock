{% set version = "5.7.1" %}  # PEP 386
{% set source_version = "5.7.1" %}
{% set base_version = "5.7.1" %}
{% set number = "0" %}
{% set cuda_enabled = cuda_compiler_version is not undefined and cuda_compiler_version == '11.0' %}
{% set build_ext_version = "1.0.0" %}
{% set build_ext = "cuda" if cuda_enabled else "cpu" %}
{% set install_base = "opt/omnisci" %}
{% set arrow_version = "3.*" %}
{% set pythrift_version = "0.13.*" %}
{% set thrift_version = "0.14.*" %}
# omniscidb 5.7 is not LLVM 12 ready
{% set llvm_version = "<12" %}

package:
  name: omniscidb-ext
  version: {{ version }}

source:
  url: https://github.com/omnisci/omniscidb/archive/v{{ source_version }}.tar.gz
  sha256: 395448687140e8c42f507f4466ceb074e7c0b354369f89f84bfbd80342f4a003
  patches:
    - 0001-explicitly-read-head-from-cons.patch
    - 0002-replace-unknown-mapd-with-std.patch

build:
  number: {{ number }}
  skip: true  # [cuda_compiler_version not in (undefined, "None", "11.0")]

requirements:
  build:
    - git
    - patch     # [not win]
    - m2-patch  # [win]

outputs:
  - name: omniscidb-common
    version: {{ version }}
    script: build-omniscidb.sh
    build:
      string: h{{PKG_HASH}}_{{number}}
      # cpu-only omniscidb-common for cuda is required only for
      # building cuda-enabled omniscidb
      skip: true  # [cuda_compiler_version not in (undefined, "None", "11.0") or not linux64]
      # todo: are not required, just useful to include. See note under host requirements.
      ignore_run_exports:
        - arrow-cpp
        - blosc
        - geos
        - glog
        - libarchive
        - libgdal
        - libllvm10
        - libpng
        - librdkafka
        - libthrift
    requirements:
      build:
        # c compiler is specified here to get run constraint pins correct, presumably..
        - {{ compiler('c') }}
        # go required for ThirdParty/generate_cert
        - {{ compiler('cgo') }}
        - {{ compiler('cxx') }}
        - clangdev {{ llvm_version }}
        # clang++ is used for generating the bytecodes of extension functions
        - clangxx {{ llvm_version }}
        - cmake
        - llvmdev {{ llvm_version }}
        - ninja
        - maven
      host:
        # omniscidb-common does not depend on build_ext, arrow-cpp
        # (and other dependencies) is required just for the presence
        # so that one could run cmake for generating *.bc, and other
        # common data files.
        - arrow-cpp ={{ arrow_version }}
        - bisonpp
        - blosc
        - boost-cpp
        - clangdev {{ llvm_version }}
        - double-conversion
        - flex
        - fmt
        - geos
        - glog
        - llvmdev {{ llvm_version }}
        - llvm {{ llvm_version }}
        - libarchive
        - libgdal
        - libpng
        - librdkafka
        - thrift-cpp {{ thrift_version }}
    test:
      commands:
        # Test installation
        # doc
        - test -f ${PREFIX}/share/doc/omnisci/LICENSE.md
        # data
        - test -d ${PREFIX}/{{ install_base }}/ThirdParty/gdal-data
        # thrift
        - test -f ${PREFIX}/{{ install_base }}/completion_hints.thrift
        - test -f ${PREFIX}/{{ install_base }}/omnisci.thrift
        - test -f ${PREFIX}/{{ install_base }}/common.thrift
        - test -f ${PREFIX}/{{ install_base }}/QueryEngine/serialized_result_set.thrift
        - test -f ${PREFIX}/{{ install_base }}/QueryEngine/extension_functions.thrift
        # includes
        - test -f ${PREFIX}/include/omnisci/Shared/funcannotations.h
        - test -f ${PREFIX}/include/omnisci/Shared/InlineNullValues.h
        - test -f ${PREFIX}/include/omnisci/Logger/Logger.h
        # QE
        - test -f ${PREFIX}/include/omnisci/QueryEngine/OmniSciTypes.h
        - test -f ${PREFIX}/{{ install_base }}/QueryEngine/RuntimeFunctions.bc
        - test -f ${PREFIX}/{{ install_base }}/QueryEngine/RuntimeFunctions.bc
        - test -f ${PREFIX}/{{ install_base }}/QueryEngine/ExtensionFunctions.ast
        # jar
        - test -f ${PREFIX}/{{ install_base }}/bin/omnisci-utility-{{ base_version }}.jar
        - test -f ${PREFIX}/{{ install_base }}/bin/omnisci-jdbc-{{ base_version }}.jar
        - test -f ${PREFIX}/{{ install_base }}/bin/calcite-1.0-SNAPSHOT-jar-with-dependencies.jar
        # Unspecified
        - test -f ${PREFIX}/{{ install_base }}/bin/startomnisci
        - test -f ${PREFIX}/{{ install_base }}/bin/omnisci_insert_sample_data
        #
        - test -f ${PREFIX}/{{ install_base }}/bin/generate_cert

  - name: omniscidb
    version: {{ version }}
    script: build-omniscidb.sh
    build:
      string: h{{PKG_HASH}}_{{number}}_{{build_ext}}
      skip: true  # [cuda_compiler_version not in (undefined, "None", "11.0") or not linux64]
      missing_dso_whitelist:
        - '*/libcuda.*'  # [cuda_compiler_version not in (undefined, "None")]
        - lib/libclang-cpp.so.10  # covered by libclang-cpp
      track_features:
        {{ "- arrow-cuda" if cuda_enabled else "" }}
      ignore_run_exports:
        - cudatoolkit    # [cuda_compiler_version not in (undefined, "None")]
        # In these the static archive is being picked up even with -DPREFER_STATIC_LIBS=off.
        - gflags
        - glog
        - libclang-cpp
        - libkml
        - ncurses
        - openldap
    requirements:
      build:
        # c compiler is specified here to get run constraint pins correct, presumably..
        - {{ compiler('c') }}
        - {{ compiler('cgo') }}
        - {{ compiler('cxx') }}
        - {{ compiler("cuda") }}  # [cuda_compiler_version not in (undefined, "None")]
        - clangdev {{ llvm_version }}
        # clang++ is used for generating the bytecodes of extension functions
        - clangxx {{ llvm_version }}
        - cmake
        - llvmdev {{ llvm_version }}
        - make
        - ninja
        - maven
      host:
        - arrow-cpp ={{ arrow_version }}
        - bisonpp
        - blosc
        # boost-cpp is a pointer to libboost; include libboost so the linking metadata is correct.
        - boost-cpp
        - libboost
        - clangdev {{ llvm_version }}
        - double-conversion
        - flex
        - fmt
        - gflags
        - glog
        - llvmdev {{ llvm_version }}
        - llvm {{ llvm_version }}
        - libarchive
        - libgdal
        - libkml
        - libpng
        - librdkafka
        - ncurses
        - openldap
        - openssl
        - snappy
        - tbb
        - tbb-devel
        - thrift-cpp {{ thrift_version }}
      run:
        # boost-cpp is a pointer to libboost; include libboost so the linking metadata is correct.
        - boost-cpp
        - libboost
        - double-conversion
        - bzip2
        # omnscidb Load-time UDF support calls clang++
        - gxx_{{ target_platform }}
        - libclang-cpp {{ llvm_version }}
        - ncurses
        - openjdk 8.*
        - xz
        - zlib
        - {{ pin_subpackage('omniscidb-common',  max_pin='x.x.x') }}
      run_constrained:
        - cudatoolkit >=11.0  # [cuda_compiler_version not in (undefined, "None")]

    test:
      commands:
        - test -f ${PREFIX}/{{ install_base }}/bin/omnisci_server
        - test -f ${PREFIX}/{{ install_base }}/bin/omnisci_initdb
        - test -f ${PREFIX}/{{ install_base }}/bin/omnisql
        - test -f ${PREFIX}/{{ install_base }}/bin/KafkaImporter
        - test -f ${PREFIX}/{{ install_base }}/bin/StreamImporter

        # Verify the activation scripts are in-place.
        {% for state in ["activate", "deactivate"] %}
        - test -f "${PREFIX}/etc/conda/{{ state }}.d/{{ PKG_NAME }}_{{ state }}.sh"
        {% endfor %}
        # Try using the activation scripts.
        - |
          if [[ -x "$(command -v omnisql)" ]]
          then
            echo "Found omnisql in PATH"
          else
            echo "omnisql not found in PATH(=$PATH)" && exit 1
          fi
          source ${PREFIX}/etc/conda/deactivate.d/{{ PKG_NAME }}_deactivate.sh
          if [[ -x "$(command -v omnisql)" ]]
          then
            echo "Unexpectedly found omnisql in PATH(=$PATH) after deactivation"  && exit 1
          else
            echo "omnisql not in PATH after deactivation"
          fi
          source ${PREFIX}/etc/conda/activate.d/{{ PKG_NAME }}_activate.sh
        # Test installation
        - omnisql -v
        - which omnisci_initdb
        - which omnisci_server
        - |
          if [ -x "$(command -v nvidia-smi)" ]; then  # [cuda_compiler_version not in (undefined, "None")]
            mkdir data && omnisci_initdb data
            omnisci_server --version
            rm -rf data
          fi                                          # [cuda_compiler_version not in (undefined, "None")]
        # these are provided by omniscidb-common package:
        - which omnisci_insert_sample_data
        - which startomnisci

    about:
      home: https://www.omnisci.com/
      license: Apache-2.0
      license_family: APACHE
      license_file: LICENSE.md
      summary: The OmniSci database

      description: |
        OmniSciDB is an in-memory, column store, SQL relational database
        that was designed from the ground up to run on GPUs.

        This recipe provides both CUDA enabled and CUDA disabled omniscidb
        packages.
      doc_url: https://www.omnisci.com/docs/latest/
      dev_url: https://github.com/omnisci/omniscidb

  - name: pyomniscidb
    version: {{ version }}
    script: build-pyomniscidb.sh
    build:
      skip: true  # [cuda_compiler_version in ("11.0",) or not (linux64 or win64 or osx)]
      string: py{{CONDA_PY}}h{{PKG_HASH}}_{{number}}
      noarch: python
    requirements:
      host:
        - python
        - setuptools_scm
        - packaging >=20.0
      run:
        - python
        - setuptools
        - {{ pin_compatible('numpy', lower_bound='1.16') }}
        - thrift {{ pythrift_version }}
        - packaging >=20.0
        - sqlalchemy >=1.3
        - requests

    about:
      home: http://github.com/omnisci/pyomnisci
      license: Apache-2.0
      license_family: Apache
      license_file: ./python/LICENSE.md
      summary: A python DB API 2 compatible client for OmniSci (formerly MapD).
      description: |
        A python DB API 2 compatible client for OmniSci (formerly MapD).
      doc_url: https://pyomnisci.readthedocs.io
      dev_url: https://github.com/omnisci/pyomnisci

    test:
      imports:
        - omnisci.cursor

  - name: omniscidbe
    version: {{ version }}
    script: build-omniscidb.sh
    build:
      string: h{{PKG_HASH}}_{{number}}_{{build_ext}}
      skip: true  # [cuda_compiler_version not in (undefined, "None", "11.0") or not linux64]
      missing_dso_whitelist:
        - '*/libcuda.*'  # [cuda_compiler_version not in (undefined, "None")]
        - lib/libclang-cpp.so.10  # covered by libclang-cpp
      track_features:
        {{ "- arrow-cuda" if cuda_enabled else "" }}
      ignore_run_exports:
        - cudatoolkit    # [cuda_compiler_version not in (undefined, "None")]
        # In these the static archive is being picked up even with -DPREFER_STATIC_LIBS=off.
        - glog
        - libclang-cpp
        - ncurses
        - librdkafka
      rpaths:
        - lib/
        # fixes "not found" in `ldd $PREFIX/lib/libDBEngine.so` output
        - {{ install_base }}/lib
    requirements:
      build:
        # c compiler is specified here to get run constraint pins correct, presumably..
        - {{ compiler('c') }}
        - {{ compiler('cgo') }}
        - {{ compiler('cxx') }}
        - {{ compiler("cuda") }}  # [cuda_compiler_version not in (undefined, "None")]
        - clangdev {{ llvm_version }}
        # clang++ is used for generating the bytecodes of extension functions
        - clangxx {{ llvm_version }}
        - cmake
        - llvmdev {{ llvm_version }}
        - make
        - ninja
        - maven
      host:
        - arrow-cpp ={{ arrow_version }}
        - bisonpp
        - blosc
        - boost-cpp
        # boost-cpp is a pointer to libboost; include libboost so the linking metadata is correct.
        - libboost
        - clangdev {{ llvm_version }}
        - double-conversion
        - flex
        - fmt
        - glog
        - llvmdev {{ llvm_version }}
        - llvm {{ llvm_version }}
        - libarchive
        - libgdal
        - libpng
        - librdkafka
        - tbb
        - tbb-devel
        - thrift-cpp {{ thrift_version }}
      run:
        - boost-cpp
        # boost-cpp is a pointer to libboost; include libboost so the linking metadata is correct.
        - libboost
        - bzip2
        # omnscidb Load-time UDF support calls clang++
        - gxx_{{ target_platform }}
        - libclang-cpp {{ llvm_version }}
        - ncurses
        - openjdk 8.*
        - xz
        - zlib
        - {{ pin_subpackage('omniscidb-common',  max_pin='x.x.x') }}
        - double-conversion
        - librdkafka
        - snappy
      run_constrained:
        - cudatoolkit >=11.0  # [cuda_compiler_version not in (undefined, "None")]

    test:
      commands:
        # Test installation
        - test -f ${PREFIX}/lib/libDBEngine.so
        # Verify the activation scripts are in-place.
        {% for state in ["activate", "deactivate"] %}
        - test -f "${PREFIX}/etc/conda/{{ state }}.d/{{ PKG_NAME }}_{{ state }}.sh"
        {% endfor %}
        - |
          source ${PREFIX}/etc/conda/activate.d/{{ PKG_NAME }}_activate.sh
          test -n "${OMNISCI_ROOT_PATH+x}"
          ldd ${PREFIX}/lib/libDBEngine.so

    about:
      home: https://www.omnisci.com/
      license: Apache-2.0
      license_family: APACHE
      license_file: LICENSE.md
      summary: The OmniSci database

      description: |
        OmniSciDB is an in-memory, column store, SQL relational database
        that was designed from the ground up to run on GPUs.
      doc_url: https://www.omnisci.com/docs/latest/
      dev_url: https://github.com/omnisci/omniscidb

  - name: pyomniscidbe
    version: {{ version }}
    script: build-omniscidb.sh
    build:
      string: py{{CONDA_PY}}h{{PKG_HASH}}_{{number}}_{{build_ext}}
      skip: true  # [cuda_compiler_version not in (undefined, "None", "11.0") or not linux64]
      missing_dso_whitelist:
        - '*/libcuda.*'  # [cuda_compiler_version not in (undefined, "None")]
      track_features:
        {{ "- arrow-cuda" if cuda_enabled else "" }}
      ignore_run_exports:
        - cudatoolkit    # [cuda_compiler_version not in (undefined, "None")]
        # these are all needed for omniscidbe itself, not the python portion..
        - arrow-cpp
        - blosc
        - glog
        - libarchive
        - libgdal
        - libllvm10
        - libpng
        - librdkafka
        - libthrift
    requirements:
      build:
        # c compiler is specified here to get run constraint pins correct, presumably..
        - {{ compiler('c') }}
        - {{ compiler('cgo') }}
        - {{ compiler('cxx') }}
        - {{ compiler("cuda") }}  # [cuda_compiler_version not in (undefined, "None")]
        - clangdev {{ llvm_version }}
        # clang++ is used for generating the bytecodes of extension functions
        - clangxx {{ llvm_version }}
        - cmake
        - llvmdev {{ llvm_version }}
        - make
        - ninja
        - maven
      host:
        - arrow-cpp ={{ arrow_version }}
        - bisonpp
        - blosc
        - boost-cpp
        - clangdev {{ llvm_version }}
        - cython
        - double-conversion
        - flex
        - fmt
        - glog
        - llvmdev {{ llvm_version }}
        - llvm {{ llvm_version }}
        - libarchive
        - libgdal
        - libpng
        - librdkafka
        - numpy
        - pyarrow ={{ arrow_version }}
        - python
        - pytest
        - tbb
        - tbb-devel
        - thrift-cpp {{ thrift_version }}
        - {{ pin_subpackage('omniscidbe', exact=True) }}
      run:
        - pyarrow ={{ arrow_version }}
        - python
        - tbb4py
        - {{ pin_subpackage('omniscidbe', exact=True) }}

      run_constrained:
        - cudatoolkit >=11.0  # [cuda_compiler_version not in (undefined, "None")]

    test:
      requires:
        - pytest
        - numpy
        - pandas
      imports:
        - omniscidbe
      source_files:
        - Embedded/test/
        - Tests/
      commands:
        - python Embedded/test/test_fsi.py
        - python Embedded/test/test_readcsv.py
        - pytest -sv Embedded/test/test_exceptions.py

    about:
      home: https://www.omnisci.com/
      license: Apache-2.0
      license_family: APACHE
      license_file: LICENSE.md
      summary: The OmniSci database

      description: |
        OmniSciDB is an in-memory, column store, SQL relational database
        that was designed from the ground up to run on GPUs.
      doc_url: https://www.omnisci.com/docs/latest/
      dev_url: https://github.com/omnisci/omniscidb

about:
  home: https://www.omnisci.com/
  license: Apache-2.0
  license_family: APACHE
  license_file: LICENSE.md
  summary: The OmniSci database

  description: |
    OmniSciDB is an in-memory, column store, SQL relational database
    that was designed from the ground up to run on GPUs.

    This recipe provides the following packages:
      omniscidb-commong
      CUDA-enabled omniscidb, cpu and cuda builds
      pyomniscdb
      omniscidb embedding library, cpu and cuda builds
      omniscidb-embedded Python extension module
  doc_url: https://www.omnisci.com/docs/latest/
  dev_url: https://github.com/omnisci/omniscidb

extra:
  recipe-maintainers:
    - xmnlab
    - pearu
    - andrewseidl
    - jclay
