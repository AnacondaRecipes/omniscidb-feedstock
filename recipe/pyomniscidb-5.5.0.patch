diff --git a/python/omnisci/__init__.py b/python/omnisci/__init__.py
index c45c9a154..f69668768 100644
--- a/python/omnisci/__init__.py
+++ b/python/omnisci/__init__.py
@@ -1,14 +1,6 @@
-from pkg_resources import get_distribution, DistributionNotFound
-
-# module constants
-try:
-    __version__ = get_distribution(__name__).version
-except DistributionNotFound:
-    # package is not installed
-    pass
-
-# clean up
-del get_distribution, DistributionNotFound
+from .version import get_package_version
+__version__ = get_package_version()
+del get_package_version
 
 apilevel = "2.0"
 threadsafety = 2
diff --git a/python/omnisci/thrift/ttypes.py b/python/omnisci/thrift/ttypes.py
index 03f8f800b..5bfdaa731 100644
--- a/python/omnisci/thrift/ttypes.py
+++ b/python/omnisci/thrift/ttypes.py
@@ -1637,11 +1637,12 @@ class TCopyParams(object):
      - s3_endpoint
      - geo_assign_render_groups
      - geo_explode_collections
+     - source_srid
 
     """
 
 
-    def __init__(self, delimiter=None, null_str=None, has_header=0, quoted=None, quote=None, escape=None, line_delim=None, array_delim=None, array_begin=None, array_end=None, threads=None, file_type=0, s3_access_key=None, s3_secret_key=None, s3_region=None, geo_coords_encoding=6, geo_coords_comp_param=32, geo_coords_type=18, geo_coords_srid=4326, sanitize_column_names=True, geo_layer_name=None, s3_endpoint=None, geo_assign_render_groups=True, geo_explode_collections=False,):
+    def __init__(self, delimiter=None, null_str=None, has_header=0, quoted=None, quote=None, escape=None, line_delim=None, array_delim=None, array_begin=None, array_end=None, threads=None, file_type=0, s3_access_key=None, s3_secret_key=None, s3_region=None, geo_coords_encoding=6, geo_coords_comp_param=32, geo_coords_type=18, geo_coords_srid=4326, sanitize_column_names=True, geo_layer_name=None, s3_endpoint=None, geo_assign_render_groups=True, geo_explode_collections=False, source_srid=0,):
         self.delimiter = delimiter
         self.null_str = null_str
         self.has_header = has_header
@@ -1666,6 +1667,7 @@ class TCopyParams(object):
         self.s3_endpoint = s3_endpoint
         self.geo_assign_render_groups = geo_assign_render_groups
         self.geo_explode_collections = geo_explode_collections
+        self.source_srid = source_srid
 
     def read(self, iprot):
         if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
@@ -1796,6 +1798,11 @@ class TCopyParams(object):
                     self.geo_explode_collections = iprot.readBool()
                 else:
                     iprot.skip(ftype)
+            elif fid == 25:
+                if ftype == TType.I32:
+                    self.source_srid = iprot.readI32()
+                else:
+                    iprot.skip(ftype)
             else:
                 iprot.skip(ftype)
             iprot.readFieldEnd()
@@ -1902,6 +1909,10 @@ class TCopyParams(object):
             oprot.writeFieldBegin('geo_explode_collections', TType.BOOL, 24)
             oprot.writeBool(self.geo_explode_collections)
             oprot.writeFieldEnd()
+        if self.source_srid is not None:
+            oprot.writeFieldBegin('source_srid', TType.I32, 25)
+            oprot.writeI32(self.source_srid)
+            oprot.writeFieldEnd()
         oprot.writeFieldStop()
         oprot.writeStructEnd()
 
@@ -6229,6 +6240,7 @@ TCopyParams.thrift_spec = (
     (22, TType.STRING, 's3_endpoint', 'UTF8', None, ),  # 22
     (23, TType.BOOL, 'geo_assign_render_groups', None, True, ),  # 23
     (24, TType.BOOL, 'geo_explode_collections', None, False, ),  # 24
+    (25, TType.I32, 'source_srid', None, 0, ),  # 25
 )
 all_structs.append(TCreateParams)
 TCreateParams.thrift_spec = (
diff --git a/python/omnisci/version.py b/python/omnisci/version.py
new file mode 100644
index 000000000..4d069f5b5
--- /dev/null
+++ b/python/omnisci/version.py
@@ -0,0 +1,23 @@
+def get_source_version():
+    import os
+    d = dict(MAJOR='5', MINOR='6', MICRO='0', EXTRA='none')
+    here = os.path.abspath(os.path.dirname(__file__))
+    try:
+        f = open(os.path.join(here, '..', '..', 'CMakeLists.txt'))
+    except FileNotFoundError:
+        return None
+    for line in f.readlines():
+        if line.lstrip().startswith('set(MAPD_VERSION_'):
+            k = line.split()[0].rsplit('_', 1)[-1]
+            n = line.split('"')[1]
+            d[k] = n
+    return '{MAJOR}.{MINOR}.{MICRO}{EXTRA}'.format(**d)
+
+
+def get_package_version():
+    from pkg_resources import get_distribution, DistributionNotFound
+    try:
+        return get_distribution(__name__).version
+    except DistributionNotFound:
+        # package is not installed
+        return get_source_version()
diff --git a/python/setup.py b/python/setup.py
index 0f0d6808e..365cd50f3 100644
--- a/python/setup.py
+++ b/python/setup.py
@@ -3,19 +3,28 @@ from codecs import open
 
 from setuptools import setup, find_packages
 
+CONDA_BUILD = int(os.environ.get('CONDA_BUILD', '0'))
+
 here = os.path.abspath(os.path.dirname(__file__))
 
 # Get the long description from the README file
 with open(os.path.join(here, "README.rst"), encoding="utf-8") as f:
     long_description = f.read()
 
+import importlib.util
+spec = importlib.util.spec_from_file_location("omnisci_version", os.path.join(here, 'omnisci', 'version.py'))
+version_module = importlib.util.module_from_spec(spec)
+spec.loader.exec_module(version_module)
+VERSION = version_module.get_source_version()  # gets version from ../CMakeLists.txt
+assert VERSION is not None
+
 install_requires = [
     "thrift == 0.13.0",
     "numpy",
     "sqlalchemy >= 1.3",
     "packaging >= 20.0",
     "requests >= 2.23.0",
-    "rbc-project == 0.2.2",
+    "rbc-project >= 0.2.2",
 ]
 
 # Optional Requirements
@@ -29,7 +38,7 @@ extra_requires = {
     "test": test_requires,
     "dev": dev_requires,
     "complete": complete_requires,
-}
+} if not CONDA_BUILD else {}  # CONDA deps are specified in meta.yaml
 
 setup(
     name="pyomniscidb",
@@ -40,7 +49,7 @@ setup(
     author="OmniSci",
     author_email="community@omnisci.com",
     license="Apache Software License",
-    python_requires=">=3.6",
+    python_requires=">=3.7",
     classifiers=[
         "Development Status :: 5 - Production/Stable",
         "Intended Audience :: Developers",
@@ -48,12 +57,12 @@ setup(
         "Topic :: Scientific/Engineering",
         "License :: OSI Approved :: Apache Software License",
         "Programming Language :: Python :: 3",
-        "Programming Language :: Python :: 3.6",
         "Programming Language :: Python :: 3.7",
+        "Programming Language :: Python :: 3.8",
         "Programming Language :: Python :: 3 :: Only",
     ],
     packages=find_packages(),
-    version="5.4.0",
+    version=VERSION,
     install_requires=install_requires,
     extras_require=extra_requires,
 )
